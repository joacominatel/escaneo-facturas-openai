version: '3.8'

services:
  db:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "${SQL_SA_PASSWORD}"
    ports:
      - "${SQL_PORT}:1433"
    volumes:
      - db-data:/var/opt/mssql  # Persistencia de datos
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${SQL_SA_PASSWORD} -Q \"SELECT 1\""]
      interval: 10s
      timeout: 10s
      retries: 10

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile.backend
    container_name: backend
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "${BACKEND_PORT}:5000"
    environment:
      # Variables de conexi√≥n a SQL Server
      SQL_SERVER_HOST: db
      SQL_SERVER_PORT: "${SQL_PORT}"
      SQL_SERVER_USER: sa
      SQL_SERVER_PASSWORD: "${SQL_SA_PASSWORD}"
      SQL_SERVER_DBNAME: "${SQL_DBNAME}"
      OPENAI_API_KEY: "${OPENAI_API_KEY}"
    networks:
      - app-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: "512M"

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile.frontend
    container_name: frontend
    depends_on:
      backend:
        condition: service_started
    ports:
      - "${FRONTEND_PORT}:3000"
    environment:
      NEXT_PUBLIC_API_URL: "http://backend:5000"
    networks:
      - app-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: "512M"

networks:
  app-network:
    driver: bridge

volumes:
  db-data: